failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed, id)
bind_rows(passed, failed, id = id)
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
parse(25081985)
parse_date_time(25081985)
parse_date_time2(25081985)
parse_date_time(25081985, "dmy")
dmy(25081985)
ymd("192012")
ymd("--192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- now()
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update()
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
source("run_analysis.R")
setwd("~/Documents/GitHub/datasciencecoursera/Assignment - Getting and Cleaning Data Course Project")
source("run_analysis.R")
df <- run_analysis()
View(df)
trainactivitypath <- "./datasets/UCI HAR Dataset/train/Y_train.txt"
testactivitypath <- "./datasets/UCI HAR Dataset/test/Y_test.txt"
activitylabelspath <- "./datasets/UCI HAR Dataset/activity_labels.txt"
lbls <- read_data(activitylabelspath)
trainlbls <- read_data(trainactivitypath)
testlbls <- read_data(testactivitypath)
trainsetlbls <- merge(trainlbls, lbls)
testsetlbls <- merge(testlbls, lbls)
lbls_all <- mergeDfs(trainsetlbls, testsetlbls, c("id", "activity"))
View(lbls_all)
lbls_all[,2]
head(lbls_all[,2])
class(lbls_all[,2])
class(lbls_all)
head(lbls_all[,"activity"])
head(lbls_all[,lbls_all$activity])
head(lbls_all[,c(lbls_all$activity)])
library(dplyr)
select(lbls_all, "activity")
select(lbls_all, activity)
head(select(lbls_all, activity))
source("run_analysis.R")
df <- run_analysis()
View(df)
View(df)
source("run_analysis.R")
df <- run_analysis()
system.file("./datasets/UCI HAR Dataset/", "train/X_train.txt")
file.path("./datasets/UCI HAR Dataset/", "train/X_train.txt")
file.path("./datasets/UCI HAR Dataset", "train/X_train.txt")
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
View(df)
View(df)
h <- c("tBodyAcc-mean()-X", "tBodyAcc-mean()-Y")
sub("^t", h, "time")
sub("^t", "time", h)
sub("^.+A.+", ".a", h)
sub("^.+A.*", ".a", h)
install.packages("reshape2")
library(reshape2)
tolower(h)
help(package = reshape2)
gsub("^.+A.*", "\\.\\1", h)
gsub("([A])", "\\.\\1", h)
gsub("([A]|[B])", "\\.\\1", h)
?gsub
source("run_analysis.R")
RenameColumns(h)
source("run_analysis.R")
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
help(package = "dplyr")
source("run_analysis.R")
?funs
source("run_analysis.R")
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
View(df)
df1 <- read.csv("./datasets/UCI HAR Dataset/train/X_train.txt", sep = "", header = FALSE, colClasses = "character")
df1 <- read.csv("./datasets/UCI HAR Dataset/train/X_train.txt", sep = "", header = FALSE, colClasses = "numeric")
View(df1)
source("run_analysis.R")
df <- RunAnalysis()
df1 <- read.csv("./datasets/UCI HAR Dataset/train/X_train.txt", sep = "", header = FALSE)
View(df1)
source("run_analysis.R")
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
View(df)
df1 <- apply(df[, 1:67], as.numeric)
df1 <- apply(df[, 1:67], 2, as.numeric)
df1 <- lapply(df[, 1:67], as.numeric)
df1 <- sapply(df[, 1:67],function(x) as.numeric(as.character(x)))
df1 <- sapply(df,function(x) as.numeric(as.character(x)))
# Reads csv file from a given @fromPath
ReadData <- function(fromPath) {
df <- read.csv(fromPath, sep = "", header = FALSE)
df
}
# Extracts mean and standard deviation columns
ExtractMeanStd <- function(df) {
df[,grep("(mean\\(\\)|std\\(\\))", names(df))]
}
# Appends train and test data frames together,
# Adds headers name to the data set.
MergeDfs <- function(train, test, headers) {
dfJoined <- rbind(train, test)
names(dfJoined) <- headers
dfJoined
}
# Rename columns names
RenameColumns <- function(name) {
newName <- gsub("^t", "time", name)
newName <- gsub("^f", "fequency", newName)
newName <- gsub("([A]|[B]|[G]|[J]|[M])", "\\.\\1", newName)
newName <- gsub("Acc", "Acceleration", newName)
newName <- gsub("Mag", "Magnitude", newName)
newName <- gsub("\\-", "\\.", newName)
newName <- gsub("\\(\\)", "", newName)
tolower(newName)
}
# file path definitions
basePath <- "./datasets/UCI HAR Dataset"
trainsetPath <- file.path(basePath, "train/X_train.txt")
trainActivityPath <- file.path(basePath, "train/Y_train.txt")
trainSubjectPath <- file.path(basePath, "train/subject_train.txt")
testsetPath <- file.path(basePath, "test/X_test.txt")
testActivityPath <- file.path(basePath, "test/Y_test.txt")
testSubjectPath <- file.path(basePath, "test/subject_test.txt")
headersPath <- file.path(basePath, "features.txt")
activityLabelsPath <- file.path(basePath, "activity_labels.txt")
# read activity labels
lbls <- ReadData(activityLabelsPath)
trainLbls <- ReadData(trainActivityPath)
testLbls <- ReadData(testActivityPath)
# merging ids of activities with its labels
trainsetLbls <- merge(trainLbls, lbls)
testsetLbls <- merge(testLbls, lbls)
# append train and test together with column names
lblsAll <- MergeDfs(trainsetLbls, testsetLbls, c("id", "activity"))
# read subjects
trainSubjectIds <- ReadData(trainSubjectPath)
testSubjectIds <- ReadData(testSubjectPath)
# merge train and test subject into one file adding column name
subjectAll <- MergeDfs(trainSubjectIds, testSubjectIds, "subject")
# read feature headers
headersDf <- ReadData(headersPath)
headers <- c(headersDf[ ,2])
trainDf <- ReadData(trainsetPath)
testDf <- ReadData(testsetPath)
View(testDf)
dfAll <- MergeDfs(trainDf, testDf, headers) %>%
ExtractMeanStd %>%
cbind(subjectAll) %>%
cbind(select(lblsAll, activity))
dfAll <- MergeDfs(trainDf, testDf, headers) %>%
ExtractMeanStd %>%
dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll <- MergeDfs(trainDf, testDf, headers) %>%
ExtractMeanStd
rm(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers) %>%
ExtractMeanStd
rm(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll <- ExtractMeanStd(dfAll)
View(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll[,grep("(mean\\(\\)|std\\(\\))", names(dfAll))]
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
View(headersDf)
headers <- c(headersDf[, 2])
View(headersDf)
headersDf[, 2]
c(headersDf[, 2])
class(headersDf[, 2])
View(headersDf)
class(select(headersDf, "V2")
)
class(select(headersDf, 2))
select(headersDf, 2)
c(select(headersDf, 2))
headers <- c(select(headersDf, 2))
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
rm(dfAll)
View(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
headers <- select(headersDf, 2)
View(headers)
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
c(headersDf[, 2])
headersDf[, 2]
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
summarise(df)
summarize(df)
summary(df)
str(df)
df %>% group_by(subject, activity) %>% summarise_each(funs(mean))
df %>% group_by(activity, subject) %>% summarise_each(funs(mean))
df %>% group_by(activity) %>% summarise_each(funs(mean))
df %>% group_by(subject) %>% summarise_each(funs(mean))
df %>% group_by(subject)
df %>% group_by(subject, activity)
library(plyr);
df2<-aggregate(. ~subject + activity, df, mean)
library(plyr); library(dplyr)
df2<-aggregate(. ~subject + activity, df, mean)
trainActivityPath <- file.path(basePath, "train/Y_train.txt")
basePath <- "./datasets/UCI HAR Dataset"
trainActivityPath <- file.path(basePath, "train/Y_train.txt")
activityLabelsPath <- file.path(basePath, "activity_labels.txt")
lbls <- ReadData(activityLabelsPath)
trainLbls <- ReadData(trainActivityPath)
testLbls <- ReadData(testActivityPath)
ReadData <- function(fromPath) {
df <- read.csv(fromPath, sep = "", header = FALSE, stringsAsFactors = FALSE)
df
}
lbls <- ReadData(activityLabelsPath)
trainLbls <- ReadData(trainActivityPath)
testLbls <- ReadData(testActivityPath)
testActivityPath <- file.path(basePath, "test/Y_test.txt")
lbls <- ReadData(activityLabelsPath)
trainLbls <- ReadData(trainActivityPath)
testLbls <- ReadData(testActivityPath)
View(trainLbls)
trainsetLbls <- merge(trainLbls, lbls)
View(trainsetLbls)
?merge
View(trainLbls)
trainsetLbls <- merge(trainLbls, lbls, by.x = trainLbls$V1, by.y = lbls$V1)
trainsetLbls <- merge(trainLbls, lbls, sort = FALSE)
View(trainsetLbls)
trainsetLbls <- merge(trainLbls, lbls, by = "V1")
trainsetLbls <- merge(trainLbls, lbls, by = "V1", sort = FALSE)
trainsetLbls <- cbind(trainLbls, lbls)
trainLbls$V1 <- lbls[trainLbls$V1, 2]
View(trainLbls)
source("run_analysis.R")
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
str(df)
?cbind
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
?write.table
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
summary(df)
str(df)
names(df)
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
33/36
deck
1/54
1/52
52
4/52
0
12/52
3/51
2/51
33/36
deck
1/52
52
4/52
0
12/52
11/51
2/52
2/5#
2/51
1.6*0.8
1.6*0.8/2
0.8*0.64
0.64/1
mypdf
integrate(mypdf, 0, 1.6)
0.64^2/4
0.25
4
2
info()
0.5^2/4
SQRT(2)
sqrt(2)
0.62
0.062
0.997*0.001
0.997*0.001 + 0.015 * 0.999
(1-.985)*(1-.001)
.000997/(.000997+.014985)
1/6
21/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5 * (edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
10/4
library(swirl)
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
dice_sqr
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
play()
rnorm(10000)
matrix(rnorm(10000),1000)
1000^2
1000 * 1000
100 * 100
?matrix
dim(rnorm(10000))
size(rnorm(10000))
length(rnorm(10000))
dim(matrix(rnorm(10000),1000))
1000 * 10
nxt()
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)
(choose(5,3)*(.8)^3*(.2)^(5-3)) + (choose(5,4)*(.8)^4*(.2)^(5-4)) + (choose(5,5)*(.8)^5*(.2)^(5-5))
pbinom(2, 5, .8, lower.tail = FALSE)
qnorm(.1)
0
qnorm(.975, 3, 2)
3 + 1.96*.975
3 + 1.96*2
pnorm(1200, 1020, 50, lower.tail = FALSE)
pnorm(1200, 1020, 50, lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
pnorm(.75, 1020, 50, lower.tail = TRUE)
qnorm(.75, 1020, 50, lower.tail = TRUE)
pnorm(qnorm(.53))
qnorm(pnorm(.53))
ppois(3, 2.5 * 4)
pbinom(5, 1000, .01)
ppois(5, 1000 * .01)
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnorm(.95)
.5 +c(-1,1) + qnorm(.975)*sqrt(.5(1-.5)/100)
.5 + qnorm(.975)*sqrt(.5(1-.5)/100)
qnorm(.975)*sqrt(.5(1-.5)/100)
qnorm(.975)*sqrt(.5 *(1 - .5)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)$conf.int
poisson.test(5, 94.32)$conf
qnorm(.95, 1100, 75)
pnorm(70, 80, 10)
pbinom(4/5, 5)
pbinom(4/5, 5, 4/5)
ppois(10, 5/3)
ppois(10, 3/5)
ppois(10, 15/3)
ppois(15, 10/3)
R.Version()
?t.test
?qt
error <- qt(0.95,df=8)*30/sqrt(9)
left <- 1100-error
right <- 1100+error
1100 + c(-1, 1) * qt(.975, df=8) * 30 / sqrt(9)
?p.test
?t.test
g1 <- c(140,138,150,148,135)
g2 <- c(132,135, 151, 146,130)
t.test(g1, g2, paired = TRUE)
1100 + c(-1, 1) * qt(.975, df=8) * 30 / sqrt(9)
p1 <- c(1,0,0,0)
p2 <- c(0,1,1,1)
t.test(p1, p2, paired = FALSE)
t.test(p1, p2, paired = FALSE, alternative = c("one.sided"))
p2 <- c(0,1,0,1)
p1 <- c(1,0,1,0)
t.test(p1, p2, paired = FALSE)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
library(ggplot2)
setwd("~/Documents/GitHub/Coursera/Specializations/Data Science/Statistical Inference")
