dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll <- MergeDfs(trainDf, testDf, headers) %>%
ExtractMeanStd
rm(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers) %>%
ExtractMeanStd
rm(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll <- ExtractMeanStd(dfAll)
View(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers)
dfAll[,grep("(mean\\(\\)|std\\(\\))", names(dfAll))]
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
View(headersDf)
headers <- c(headersDf[, 2])
View(headersDf)
headersDf[, 2]
c(headersDf[, 2])
class(headersDf[, 2])
View(headersDf)
class(select(headersDf, "V2")
)
class(select(headersDf, 2))
select(headersDf, 2)
c(select(headersDf, 2))
headers <- c(select(headersDf, 2))
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
rm(dfAll)
View(dfAll)
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
headers <- select(headersDf, 2)
View(headers)
dfAll <- MergeDfs(trainDf, testDf, headers)
View(dfAll)
c(headersDf[, 2])
headersDf[, 2]
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
summarise(df)
summarize(df)
summary(df)
str(df)
df %>% group_by(subject, activity) %>% summarise_each(funs(mean))
df %>% group_by(activity, subject) %>% summarise_each(funs(mean))
df %>% group_by(activity) %>% summarise_each(funs(mean))
df %>% group_by(subject) %>% summarise_each(funs(mean))
df %>% group_by(subject)
df %>% group_by(subject, activity)
library(plyr);
df2<-aggregate(. ~subject + activity, df, mean)
library(plyr); library(dplyr)
df2<-aggregate(. ~subject + activity, df, mean)
trainActivityPath <- file.path(basePath, "train/Y_train.txt")
basePath <- "./datasets/UCI HAR Dataset"
trainActivityPath <- file.path(basePath, "train/Y_train.txt")
activityLabelsPath <- file.path(basePath, "activity_labels.txt")
lbls <- ReadData(activityLabelsPath)
trainLbls <- ReadData(trainActivityPath)
testLbls <- ReadData(testActivityPath)
ReadData <- function(fromPath) {
df <- read.csv(fromPath, sep = "", header = FALSE, stringsAsFactors = FALSE)
df
}
lbls <- ReadData(activityLabelsPath)
trainLbls <- ReadData(trainActivityPath)
testLbls <- ReadData(testActivityPath)
testActivityPath <- file.path(basePath, "test/Y_test.txt")
lbls <- ReadData(activityLabelsPath)
trainLbls <- ReadData(trainActivityPath)
testLbls <- ReadData(testActivityPath)
View(trainLbls)
trainsetLbls <- merge(trainLbls, lbls)
View(trainsetLbls)
?merge
View(trainLbls)
trainsetLbls <- merge(trainLbls, lbls, by.x = trainLbls$V1, by.y = lbls$V1)
trainsetLbls <- merge(trainLbls, lbls, sort = FALSE)
View(trainsetLbls)
trainsetLbls <- merge(trainLbls, lbls, by = "V1")
trainsetLbls <- merge(trainLbls, lbls, by = "V1", sort = FALSE)
trainsetLbls <- cbind(trainLbls, lbls)
trainLbls$V1 <- lbls[trainLbls$V1, 2]
View(trainLbls)
source("run_analysis.R")
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
View(df)
str(df)
?cbind
source("run_analysis.R")
df <- RunAnalysis()
View(df)
source("run_analysis.R")
df <- RunAnalysis()
?write.table
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
source("run_analysis.R")
df <- RunAnalysis()
summary(df)
str(df)
names(df)
ls()
getwd()
setwd("~/Documents/GitHub/Coursera/Specializations/Data Science/Reproducible Research/Assessment 2")
library(R.utils)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if (!file.exists("./data/StormData.csv.bz2")) {
dir.create("data")
download.file(url, destfile = "./data/StormData.csv.bz2", method="curl")
bunzip2 ("./data/StormData.csv.bz2", overwrite=TRUE, remove=FALSE, destname="./data/StormData.csv")
dateDownloaded <- date()
}
stormdata <- read.csv ("./data/StormData.csv", header=TRUE, stringsAsFactors=FALSE)
dim(stormdata)
head(stormdata)
str(stormdata)
head(stormdata)
?str
data <- stormdata[, c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP","CROPDMG", "CROPDMGEXP")]
sum (is.na (data))
unique(data$PROPDMGEXP)
unique(data$CROPDMGEXP)
1E1
1E0
1E2
# Property damage
data$PROPDMGEXP <- gsub("^$|-|\\?|0",  1E0, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[1|\\+]",  1E1, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[2|hH]", 1E2, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[3|kK]", 1E3, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[4]", 1E4, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[5]", 1E5, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[mM]|6", 1E6, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[7]", 1E7, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[8]", 1E8, data$PROPDMGEXP)
data$PROPDMGEXP <- gsub("[bB]", 1E9, data$PROPDMGEXP)
data$PROPDMG <- data$PROPDMG * as.numeric(data$PROPDMGEXP)
# Crop damage
data$CROPDMGEXP <- gsub("^$|-|\\?|0",  1E0, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[1|\\+]",  1E1, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[2|hH]", 1E2, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[3|kK]", 1E3, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[4]", 1E4, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[5]", 1E5, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[mM]|6", 1E6, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[7]", 1E7, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[8]", 1E8, data$CROPDMGEXP)
data$CROPDMGEXP <- gsub("[bB]", 1E9, data$CROPDMGEXP)
data$CROPDMG <- data$CROPDMG * as.numeric(data$CROPDMGEXP)
fatalities <- aggregate(data$FATALITIES, by = list(data$EVTYPE), sum)
injuries <- aggregate(data$INJURIES, by = list(data$EVTYPE), sum)
View(fatalities)
View(injuries)
View(fatalities)
fatalities <- aggregate(data$FATALITIES, by = list(data$EVTYPE), sum)
injuries <- aggregate(data$INJURIES, by = list(data$EVTYPE), sum)
fatalities_injuries <- cbind(fatalities, injuries[, 2])
colnames(fatalities_injuries) <- c("type", "fatalities", "injuries")
View(fatalities_injuries)
top_10_fatalities <- arrange(fatalities, desc(fatalities$FATALITIES))[1:10,]
top_10_injuries <- arrange(injuries, desc(injuries$INJURIES))[1:10,]
library(ggplot2)
library(dplyr)
top_10_fatalities <- arrange(fatalities, desc(fatalities$FATALITIES))[1:10,]
top_10_injuries <- arrange(injuries, desc(injuries$INJURIES))[1:10,]
fatalities <- aggregate(data$FATALITIES, by = list(data$EVTYPE), sum)
injuries <- aggregate(data$INJURIES, by = list(data$EVTYPE), sum)
top_10_fatalities <- arrange(fatalities, desc(fatalities$FATALITIES))[1:10,]
top_10_injuries <- arrange(injuries, desc(injuries$INJURIES))[1:10,]
fatalities <- aggregate(data$FATALITIES, by = list(data$EVTYPE), sum)
injuries <- aggregate(data$INJURIES, by = list(data$EVTYPE), sum)
colnames(fatalities) <- c("EVTYPE", "FATALITIES")
colnames(injuries) <- c("EVTYPE", "INJURIES")
top_10_fatalities <- arrange(fatalities, desc(fatalities$FATALITIES))[1:10,]
top_10_injuries <- arrange(injuries, desc(injuries$INJURIES))[1:10,]
View(fatalities)
View(injuries)
str(fatalities)
arrange(fatalities, desc(fatalities$FATALITIES))
?arrange
arrange(fatalities, desc(FATALITIES))
top_10_fatalities <- arrange(fatalities, desc(FATALITIES))[1:10, ]
top_10_injuries <- arrange(injuries, desc(INJURIES))[1:10, ]
View(top_10_fatalities)
View(top_10_injuries)
View(injuries)
View(top_10_injuries)
View(top_10_fatalities)
plotFatalities <- ggplot(top_10_fatalities, aes(x=reorder(EVTYPE, FATALITIES), y=FATALITIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x=reorder(EVTYPE, INJURIES), y=INJURIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
grid.arrange(plotFatalities, plotInjuries, main="Weather events most harmful to public health from 1950 to 2011")
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
plotFatalities <- ggplot(top_10_fatalities, aes(x=reorder(EVTYPE, FATALITIES), y=FATALITIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x=reorder(EVTYPE, INJURIES), y=INJURIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
grid.arrange(plotFatalities, plotInjuries, main="Weather events most harmful to public health from 1950 to 2011")
plotFatalities <- ggplot(top_10_fatalities, aes(x=EVTYPE), y=FATALITIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x=EVTYPE), y=INJURIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
grid.arrange(plotFatalities, plotInjuries, main="Weather events most harmful to public health from 1950 to 2011")
plotFatalities <- ggplot(top_10_fatalities, aes(x=EVTYPE), y=FATALITIES) +
geom_bar() +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x=EVTYPE), y=INJURIES) +
geom_bar() +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
grid.arrange(plotFatalities, plotInjuries, main="Weather events most harmful to public health from 1950 to 2011")
plotFatalities <- ggplot(top_10_fatalities, aes(x=EVTYPE), y=FATALITIES) +
geom_bar() +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x=EVTYPE), y=INJURIES) +
geom_bar() +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
do.call(grid.arrange, c(plotFatalities, plotInjuries, list(ncol=2)))
plotFatalities()
plotFatalities
plotFatalities <- ggplot(top_10_fatalities) +
geom_bar() +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries) +
geom_bar() +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
do.call(grid.arrange, c(plotFatalities, plotInjuries, list(ncol=2)))
plotFatalities
View(top_10_fatalities)
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar() +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
do.call(grid.arrange, c(plotFatalities, plotInjuries, list(ncol=2)))
plotFatalities
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
do.call(grid.arrange, c(plotFatalities, plotInjuries, list(ncol=2)))
plotFatalities
plotInjuries
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths')
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries')
do.call(grid.arrange, c(plotFatalities, plotInjuries, list(nrow=2)))
plotInjuries
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
do.call(grid.arrange, c(plotFatalities, plotInjuries, list(nrow=2)))
plotInjuries
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(f1, f2, main="Most harmful weather events related to deaths and injuries from 1950 to 2011")
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotFatalities, plotInjuries, main="Most harmful weather events related to deaths and injuries from 1950 to 2011")
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
multiplot(plotFatalities, plotInjuries, cols=2)
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotFatalities, plotInjuries)
plotFatalities <- ggplot(top_10_fatalities, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for fatalities') +
xlab('Type of event') +
ylab('Total number of deaths') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotInjuries <- ggplot(top_10_injuries, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for injuries') +
xlab('Type of event') +
ylab('Total number of Injuries') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotFatalities, plotInjuries, ncol=2)
View(top_10_fatalities)
View(top_10_injuries)
View(top_10_injuries)
prop_damage <- aggregate(data$PROPDMG, by = list(data$EVTYPE), sum)
crop_damage <- aggregate(data$CROPDMG, by = list(data$EVTYPE), sum)
colnames(prop_damage) <- c("EVTYPE", "PROPDMG")
colnames(crop_damage) <- c("EVTYPE", "CROPDMG")
top_10_prop_dam <- arrange(prop_damage, desc(PROPDMG))[1:10, ]
top_10_crop_dam <- arrange(crop_damage, desc(CROPDMG))[1:10, ]
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG), col = rainbow (30, start=0, end=0.5)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG), fill = rainbow (30, start=0, end=0.5)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG, fill = rainbow (30, start=0, end=0.5))) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG, fill = rainbow (10, start=0, end=0.5))) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG, col = rainbow (10, start=0, end=0.5))) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG, fill = rainbow (10, start=0, end=0.5))) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
plotPropertyDam <- ggplot(top_10_prop_dam, aes(x = EVTYPE, y = PROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for property damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotCropDam <- ggplot(top_10_crop_dam, aes(x = EVTYPE, y = CROPDMG)) +
geom_bar(stat='identity') +
ggtitle('Top 10 wheater events for crop damage') +
xlab('Type of event') +
ylab('Cost in US dollars') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(plotPropertyDam, plotCropDam, ncol=2)
