cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
install.packages("xlsx")
install.packages("xlsxjars")
library(xlsx)
library(rJava)
library(xlsxjars)
library(xlsx)
source("Quizz.R")
setwd("~/Documents/GitHub/Coursera/Specializations/Data Science/Getting and Cleaning Data/Week 1")
source("Quizz.R")
source("Quizz.R")
question3Download()
question3()
source("Quizz.R")
question3()
library(xml)
install.packages("XML")
library(xml)
library(XML)
source("Quizz.R")
source("Quizz.R")
rootNode <- question4Download()
rootNode <- question4Download()
rootNode <- question4Download()
source("Quizz.R")
rootNode <- question4Download()
xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
rootNode <- question4Download()
source("Quizz.R")
rootNode <- question4Download()
zip <- question4(rootNode)
class(zip)
length(zip)
source("Quizz.R")
zip <- question4(rootNode)
length(zip)
source("Quizz.R")
zip <- question4(rootNode)
length(zip)
source("Quizz.R")
question4(rootNode)
install.packages("data.table")
source("Quizz.R")
question5Download()
DT <- question5ReadFile()
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
source("Quizz.R")
system.time(runFunction(mean(DT$pwgtp15,by=DT$SEX)))
system.time(runFunction(f <- mean(DT$pwgtp15,by=DT$SEX)))
class(mean(DT$pwgtp15,by=DT$SEX))
system.time(runFunction(function() mean(DT$pwgtp15,by=DT$SEX)))
system.time(runFunction(function() DT[,mean(pwgtp15),by=SEX]))
system.time(runFunction(function() {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}))
system.time(runFunction(function() tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(runFunction(function() {rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]}))
system.time(runFunction(function() sapply(split(DT$pwgtp15,DT$SEX),mean)))
